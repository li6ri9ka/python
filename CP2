enter = 'Введите букву или слово: '
win = 'Вы угадали слово!'
wrong = 'Неправильно. Осталось жизней: '
loose = 'Вы проиграли. Загаданное слово было: '
################################################################
def draw_hangman(lives):
    with open('hangman_state.txt', 'r', encoding='utf-8') as file:
        hangman_states = file.read().split('\n\n')
    state_index = len(hangman_states) - lives-1
    for line in hangman_states[state_index].split('\n'):
        print(line)

import random

def get_words(file_name):
    words_dict = {}
    with open(file_name, 'r', encoding='utf-8') as file:
        for line in file:
            word, hint = line.strip().split(': ')
            words_dict[word] = hint
    return words_dict


def show_hint(hint):
    print(hint)


def check_len_words(words):
    return len(words) > 0


def get_word(words):
    word = random.choice(list(words))
    hint = words[word]
    return word.lower(), hint


def create_table(word):
    return "\u25A0" * len(word)


def get_lives(word):
    return len(word)


def is_alive(lives: int):
    return lives > 0


def show_table(table):
    print(table)


def prompt(msg):
    return input(msg).lower()


def show_message(msg):
    print(msg)


def is_word_correct(word, answer):
    return word == answer


def is_continue():
    continue_answer = input('Сыграем еще раз? y/n: ').lower()
    if continue_answer == 'y' or continue_answer == 'n':
        return True
    else:
        return False


def update_table(table, word, answer):
    if is_word_correct(word, answer):
        return list(word)
    elif len(answer) == 1 and answer in word:
        return ''.join([letter if letter == answer or letter in table else '\u25A0' for letter in word])
    return table


def decrease_lives(lives):
    return lives - 1


def is_word_guessed(table):
    return "\u25A0" not in table

##############################################
words = get_words('words.txt')

while words:
    current_word, hint = get_word(words)
    del words[current_word.capitalize()]
    table = create_table(current_word)
    lives = get_lives(current_word)
    guessed = False

    while is_alive(lives) and not guessed:
        show_hint(hint)
        show_table(table)
        answer = prompt(enter)
        if is_word_correct(current_word, answer):
            show_message(win)
            guessed = True
        elif answer in current_word:
            table = update_table(table, current_word, answer)
            if is_word_guessed(table):
                show_table(table)
                show_message(win)
                guessed = True
        else:
            lives = decrease_lives(lives)
            show_message(wrong + str(lives))
            draw_hangman(lives)

    if lives == 0:
        show_message(loose + current_word)

    if guessed and is_continue():
        continue
    else:
        break

show_message('Слова закончились')

hangman_state.txt:
_____________
 |/      |
 |      ( )
 |
 |
 |
 |
_|___

_____________
 |/      |
 |      ( )
 |       |
 |       |
 |
 |
_|___

_____________
 |/      |
 |      ( )
 |      \|
 |       |
 |
 |
_|___

_____________
 |/      |
 |      ( )
 |      \|/
 |       |
 |
 |
_|___

_____________
 |/      |
 |      ( )
 |      \|/
 |       |
 |      /
 |
_|___

_____________
 |/      |
 |      (X)
 |      \|/
 |       |
 |      / \
 |
_|___

words:
Яблоко: это фрукт.
Банан: Желтый фрукт с изогнутой формой.
Кот: Маленький домашний питомец.
Собака: Дружелюбный четвероногий друг.
Слон: Крупное животное с хоботом.
Жираф: Животное с длинной шеей и пятнистым окрасом.
